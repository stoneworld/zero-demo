// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbCourseFieldNames          = builder.RawFieldNames(&TbCourse{}, true)
	tbCourseRows                = strings.Join(tbCourseFieldNames, ",")
	tbCourseRowsExpectAutoSet   = strings.Join(stringx.Remove(tbCourseFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	tbCourseRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tbCourseFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	tbCourseModel interface {
		Insert(ctx context.Context, data *TbCourse) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*TbCourse, error)
		Update(ctx context.Context, data *TbCourse) error
		Delete(ctx context.Context, id string) error
	}

	defaultTbCourseModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbCourse struct {
		Id           string         `db:"id"`
		Title        string         `db:"title"`
		Description  string         `db:"description"`
		CoverImg     string         `db:"cover_img"`
		Sort         int64          `db:"sort"`
		CreatedAt    time.Time      `db:"created_at"`
		UpdatedAt    sql.NullTime   `db:"updated_at"`
		RoutePath    string         `db:"route_path"`
		TotalScore   int64          `db:"total_score"`
		UserCnt      int64          `db:"user_cnt"`
		ShareUrl     string         `db:"share_url"`
		StartStatus  int64          `db:"start_status"`
		ExtendedInfo sql.NullString `db:"extended_info"` // 扩展信息
	}
)

func newTbCourseModel(conn sqlx.SqlConn) *defaultTbCourseModel {
	return &defaultTbCourseModel{
		conn:  conn,
		table: `"public"."tb_course"`,
	}
}

func (m *defaultTbCourseModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTbCourseModel) FindOne(ctx context.Context, id string) (*TbCourse, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tbCourseRows, m.table)
	var resp TbCourse
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbCourseModel) Insert(ctx context.Context, data *TbCourse) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)", m.table, tbCourseRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Title, data.Description, data.CoverImg, data.Sort, data.RoutePath, data.TotalScore, data.UserCnt, data.ShareUrl, data.StartStatus, data.ExtendedInfo)
	return ret, err
}

func (m *defaultTbCourseModel) Update(ctx context.Context, data *TbCourse) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, tbCourseRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Title, data.Description, data.CoverImg, data.Sort, data.RoutePath, data.TotalScore, data.UserCnt, data.ShareUrl, data.StartStatus, data.ExtendedInfo)
	return err
}

func (m *defaultTbCourseModel) tableName() string {
	return m.table
}
