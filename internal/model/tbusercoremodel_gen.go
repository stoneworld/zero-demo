// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tbUserCoreFieldNames          = builder.RawFieldNames(&TbUserCore{}, true)
	tbUserCoreRows                = strings.Join(tbUserCoreFieldNames, ",")
	tbUserCoreRowsExpectAutoSet   = strings.Join(stringx.Remove(tbUserCoreFieldNames, "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"), ",")
	tbUserCoreRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(tbUserCoreFieldNames, "id", "create_at", "create_time", "created_at", "update_at", "update_time", "updated_at"))
)

type (
	tbUserCoreModel interface {
		Insert(ctx context.Context, data *TbUserCore) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*TbUserCore, error)
		Update(ctx context.Context, data *TbUserCore) error
		Delete(ctx context.Context, id string) error
	}

	defaultTbUserCoreModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TbUserCore struct {
		Id       string         `db:"id"`    // References the internal Supabase Auth user.
		Email    sql.NullString `db:"email"` // References the internal Supabase Auth user email.
		Github   sql.NullString `db:"github"`
		Username sql.NullString `db:"username"`
		Nickname sql.NullString `db:"nickname"`
		Twitter  sql.NullString `db:"twitter"`
		Bio      sql.NullString `db:"bio"`
		Avatar   sql.NullString `db:"avatar"`
		Viewer   sql.NullString `db:"viewer"`
	}
)

func newTbUserCoreModel(conn sqlx.SqlConn) *defaultTbUserCoreModel {
	return &defaultTbUserCoreModel{
		conn:  conn,
		table: `"public"."tb_user_core"`,
	}
}

func (m *defaultTbUserCoreModel) Delete(ctx context.Context, id string) error {
	query := fmt.Sprintf("delete from %s where id = $1", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTbUserCoreModel) FindOne(ctx context.Context, id string) (*TbUserCore, error) {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", tbUserCoreRows, m.table)
	var resp TbUserCore
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTbUserCoreModel) Insert(ctx context.Context, data *TbUserCore) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values ($1, $2, $3, $4, $5, $6, $7, $8, $9)", m.table, tbUserCoreRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Email, data.Github, data.Username, data.Nickname, data.Twitter, data.Bio, data.Avatar, data.Viewer)
	return ret, err
}

func (m *defaultTbUserCoreModel) Update(ctx context.Context, data *TbUserCore) error {
	query := fmt.Sprintf("update %s set %s where id = $1", m.table, tbUserCoreRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Id, data.Email, data.Github, data.Username, data.Nickname, data.Twitter, data.Bio, data.Avatar, data.Viewer)
	return err
}

func (m *defaultTbUserCoreModel) tableName() string {
	return m.table
}
